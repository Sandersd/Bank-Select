// Assignment #: 6
//         Name: Dylan Sanders
//    StudentID: 1206657071
//      Lecture: 4:30 TTh
//  Description: SelectPanel lets users choose from the current Banks and add them to
//				 a separate list. They can then remove the banks. Keeps track of
//				 number of banks in the selected list.

import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import javax.swing.event.*;

import java.util.*;

public class SelectPanel extends JPanel
{      //declare instance variables and components
       private Vector<String> bankList;
       private JList cList;
       private JList temp;
       private JButton add, remove;
       private JLabel avail, select, num;
       private JPanel jp1, jp2, jp3, jp4;
       private JScrollPane availPane, selectPane;
       private DefaultListModel listModel;
       private int index;

 		public SelectPanel(Vector<String> bankList)
        {
 			 listModel = new DefaultListModel();		
 			 this.bankList = bankList;
 		     cList = new JList(bankList);						//New JList for Selected Banks
 		     temp = new JList(listModel);
			 cList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			 index = 0;
			 
			 jp1 = new JPanel(new BorderLayout());
			 jp2 = new JPanel(new GridLayout(2,1));
			 jp3 = new JPanel(new BorderLayout());
			 jp4 = new JPanel(new GridLayout(1,3));				//Layouts

			 add = new JButton("Add");
			 remove = new JButton("Remove");					//Buttons
			 
			 avail = new JLabel("Available bank(s)");
			 select = new JLabel("Selected bank(s)");
			 num = new JLabel("The number of selected banks: 0");	//Labels
			 
			 availPane = new JScrollPane(cList);			 //ScrollPanes holding JList data
			 selectPane = new JScrollPane(temp);
			 
			 jp1.add(avail, BorderLayout.NORTH);
			 jp1.add(availPane, BorderLayout.CENTER);
			 
			 jp2.add(add);
			 add.addActionListener(new ButtonListener());		//ActionListeners
			 jp2.add(remove);
			 remove.addActionListener(new ButtonListener());
			 
			 jp3.add(select, BorderLayout.NORTH);
			 jp3.add(selectPane, BorderLayout.CENTER);
			 
			 jp4.add(jp1);
			 jp4.add(jp2);
			 jp4.add(jp3);
			 
			 setLayout(new BorderLayout());
			 add(jp4, BorderLayout.CENTER);
			 add(num, BorderLayout.SOUTH);					//Formatting Layout


 		    // orgranize components for the panel
         }

 		//This method can refresh the appearance of the list of banks
		//by calling updateUI() method for the JList.
		//It can be called from the CreatePanel class whenever a new bank name
 	     //is added to the vector and the JList appearence needs to be refreshed.
 		public void updateBankList()
 	    {
			cList.setListData(bankList);

        }

 		private class ButtonListener implements ActionListener
 		{
 			      public void actionPerformed(ActionEvent event)
 			      {
            		  String availHighlight = (String) cList.getSelectedValue();
            		  String selectHighlight = (String) temp.getSelectedValue();		//User input
            		  
 			    	  if(event.getSource()==add) {
 			    		  if(availHighlight != null) {				//Selected something
 			    			  boolean found = false;
 			    			  for(int i = 0; i < listModel.size(); i++) {
 			    				  if(availHighlight.equals((String) listModel.get(i))) {
 			    					  found = true;
 			    					  break;						//Searching for match
 			    				  }
 			    			  }
 			    			  if(found==false) {
 			    				  listModel.addElement(cList.getSelectedValue());	//Adding bank, incrementing index
 			    				  index++;
 			    				  num.setText("The number of selected banks: "+index);	//Updating label
 			    			  }
 			    		 }
 			    	  }
 			    	  else if(event.getSource()==remove) {
 			    		 if(selectHighlight != "") {
 			    			 listModel.remove(temp.getSelectedIndex()); 	//Removing Selected bank
 			    			 index--;
 			    			num.setText("The number of selected banks: "+index);
 			    		 }
 			    	  }
 			    	  //When the add button is pushed, the selected bank
           			   //should be added to the right list and the number of
                       //selected banks is incremented by 1.
                      //When the remove button is pushed, the selected bank
                      //should be removed from the right list and the number of
           			 //selected banks is decremented by 1.

            		//Be careful for the cases when no item has been selected.
                   }
        } //end of ButtonListener class

} //end of SelectPanel class
